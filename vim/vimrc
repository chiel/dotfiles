filetype off
call pathogen#helptags()
call pathogen#runtime_append_all_bundles()

" nerdtree settings
let g:NERDTreeMouseMode = 2
let g:NERDTreeWinSize = 40
let g:NERDChristmasTree = 1
let g:NERDTreeHighlightCursorline = 1
let g:NERDTreeShowHidden = 1

" ==============================
" Interface stuff
" ==============================
" Always open new windows on the right/bottom
set splitright
set splitbelow
" Line numbers
set number
" Always display status line
set laststatus=2
" No wrapping
set nowrap
" Enable the mouse
set mouse=a
" Highlight search results
set hlsearch
" Show tab characters & when a line is too long
set list
set listchars=tab:\|\ ,extends:>
" Enable file type detection.
filetype plugin indent on

" Use indents for folds & open all, by default
set foldmethod=indent
set foldlevelstart=99
set nofoldenable

" <space> toggles folds opened and closed
nnoremap <space> za

" <space> in visual mode creates a fold over the marked range
vnoremap <space> zf

" ==============================
" Syntax
" ==============================
" Set tab display as two spaces, don't expand
set shiftwidth=2
set tabstop=2
set noexpandtab
set smarttab
" Auto indent stuff
set autoindent
" Always encode files as utf-8
set encoding=utf-8
" Turn on syntax highlighting
syntax on
" Load colorscheme
colorscheme fresh

" ==============================
" Backups
" ==============================
" Turn off backups and swap files
set nobackup
set nowb
set noswapfile

" ==============================
" Visual mode
" ==============================
" Make tab indent in visual mode, and shift tab undent
vmap <tab> >gv
vmap <s-tab> <gv

" ==============================
" Autocmd stuff
" ==============================
" Highlight current line only for active window
autocmd BufWinEnter * setlocal cursorline
autocmd WinEnter * setlocal cursorline
autocmd WinLeave * setlocal nocursorline

" Trim whitespace off line-endings on save
autocmd BufWritePre * :%s/\s\+$//e

" Let me know when lines go over 80 chars
autocmd BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>100v.\+', -1)

" When editing a file, always jump to the last known cursor position.
autocmd BufReadPost *
	\ if line("'\"") > 0 && line("'\"") <= line("$") |
	\   exe "normal g`\"" |
	\ endif

" ==============================
" Moving around
" ==============================
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" ==============================
" Statusline
" ==============================
" Format the statusline
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L:%c

function! CurDir()
	let curdir = substitute(getcwd(), '/Users/amir/', "~/", "g")
	return curdir
endfunction

function! HasPaste()
	if &paste
		return 'PASTE MODE  '
	else
		return ''
	endif
endfunction

" Remap the tab key to do autocompletion or indentation depending on the
" context (from http://www.vim.org/tips/tip.php?tip_id=102)
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>
